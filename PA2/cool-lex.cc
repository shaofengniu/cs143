#line 2 "cool-lex.cc"

#line 4 "cool-lex.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */

/* %if-c-only */
/* %if-not-reentrant */

/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
/* %endif */

/* %if-c-only */
    
/* %endif */

/* %if-c-only */

/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* %endif */

/* %if-c++-only */
/* %endif */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* %not-for-header */

/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)
/* %ok-for-header */

/* %if-reentrant */
/* %endif */

/* %if-not-reentrant */

/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

/* %if-not-reentrant */
extern int yyleng;
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
extern FILE *yyin, *yyout;
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
	FILE *yy_input_file;
/* %endif */

/* %if-c++-only */
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %if-not-reentrant */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* %if-c-only Standard (non-C++) definition */

/* %if-not-reentrant */
/* %not-for-header */

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;
/* %ok-for-header */

/* %endif */

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );

/* %endif */

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */

#define FLEX_DEBUG

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

/* %if-c-only Standard (non-C++) definition */

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	(yy_c_buf_p) = yy_cp;

/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 51
#define YY_END_OF_BUFFER 52
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[719] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       52,   50,   48,   49,    4,   26,   26,   26,   26,   44,
       26,   26,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   18,   18,   20,   19,   18,   19,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   21,   21,   22,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,

       21,   21,   21,   21,    6,    6,    9,    5,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,   50,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,   10,   11,   11,   14,   15,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   50,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   48,    1,    3,
        2,   44,   25,   24,   23,   46,   46,   46,   46,   46,
       29,   30,   31,   46,   46,   46,   46,   46,   40,   46,
       46,   46,   47,   47,   47,   47,   47,   47,   29,   30,

       31,   47,   47,   47,   47,   47,   40,   47,   47,   47,
       47,   18,   18,   17,   16,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,    6,    6,    6,

        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        8,    7,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   12,   13,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   46,   46,   46,   46,   46,
       46,   33,   46,   41,   43,   46,   46,   46,   47,   47,

       47,   47,   47,   47,   47,   33,   47,   41,   43,   47,
       47,   47,   47,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    0,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,    0,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   38,   46,   28,
       39,   46,   46,   34,   35,   36,   46,   38,   47,   28,
       39,   47,   47,   47,   34,   35,   36,   45,   47,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,    6,    6,    6,    6,    6,    6,    6,

        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   27,   46,   46,
       37,   27,   47,   47,   37,   18,   18,   18,   18,   18,
       18,   18,   18,   21,   21,   21,   21,   21,   21,   21,
       21,    6,    6,    6,    6,    6,    6,    6,    6,   11,
       11,   11,   11,   11,   11,   11,   11,   46,   42,   47,
       42,   18,   18,   18,   18,   21,   21,   21,   21,    6,
        6,    6,    6,   11,   11,   11,   11,   46,   47,   18,

       18,   21,   21,    6,    6,   11,   11,   32,   32,   18,
       18,   21,   21,    6,    6,   11,   11,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        2,    2,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    1,    1,    1,    1,    1,    5,
        6,    7,    8,    8,    9,    8,    8,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,    8,    8,   11,
       12,   13,    1,    8,   14,   15,   16,   17,   18,   19,
       15,   20,   21,   15,   15,   22,   15,   23,   24,   25,
       15,   26,   27,   28,   29,   30,   31,   15,   15,   15,
        1,   32,    1,    1,   33,    1,   34,   35,   36,   37,

       38,   39,   35,   40,   41,   35,   35,   42,   35,   43,
       44,   45,   35,   46,   47,   48,   49,   50,   51,   35,
       35,   35,    8,    1,    8,    8,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[53] =
    {   0,
        1,    1,    2,    3,    4,    1,    4,    1,    1,    5,
        1,    1,    1,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    3,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    6
    } ;

static yyconst flex_int16_t yy_base[735] =
    {   0,
        0,    0,   52,    0,  104,    0,  156,    0,  208,    0,
      662, 3963,  645, 3963, 3963,  638, 3963,  635,  615,  600,
      252,  576,    0,  248,  241,  244,  248,  248,  255,  250,
      250,  256,  257,    0,  284,  278,  287,  284,  286,  291,
      283,  288,  293,  294,    0,  584, 3963,  565,    0,  562,
      525,  269,  519,  339,  391,  322,  332,  430,  464,  495,
      341,  343,  348,  387,  539,  591,  384,  394,  630,  664,
      695,  398,  424,  726,  425,    0,  526, 3963,    0,  517,
      349,  513,  772,  824,  428,  462,  863,  897,  928,  473,
      457,  496,  535,  972, 1024,  532,  539, 1063, 1097, 1128,

      548,  500, 1159,  574,    0,  523, 3963, 3963,    0,  513,
      367,  508, 1205, 1218,  584,  542, 1247, 1281, 1312,  593,
      595,  608,  641,  494, 1356, 1369,  624,  670, 1398, 1432,
     1463,  681,  700, 1494,  645, 3963,    0,  491, 3963, 3963,
        0,  480,  369,  476, 1540, 1592,  716,  748, 1631, 1665,
     1696,  772,  773,  778,  779,  460, 1740, 1792,  820,  827,
     1831, 1865, 1896,  831,  850, 1927,  861,  454, 3963, 3963,
     3963,  441, 3963, 3963, 3963,    0,  290,  380,  383,  420,
        0,    0,  421,  430,  446,  461,  469,  483,    0,  534,
      547,  580,    0,  593,  620,  609,  646,  648,    0,    0,

      654,  646,  673,  681,  676,  688,    0,  707,  717,  712,
      724,    0,  422, 3963, 3963,  412,    0,    0,    0,  774,
      866,  829,  882,  865,  898,  903,  914,  968,  972,  973,
     1020, 1025,  929,  977,  974, 1027,  933, 1061, 1030, 1065,
     1067, 1082, 1103, 1106, 1129, 1146, 1161, 1160, 1214, 1225,
     1122, 1220, 1254, 1229, 1279,    0,  417,  386,    0,    0,
        0, 1290, 1295, 1313, 1371, 1317, 1365, 1372, 1382, 1401,
     1405, 1438, 1461, 1476, 1457, 1495, 1536, 1541, 1501, 1542,
     1543, 1588, 1545, 1546, 1594, 1595, 1598, 1597, 1627, 1638,
     1654, 1629, 1670, 1736, 1679, 1694, 1740,    0,  387,  376,

        0,    0,    0, 1697, 1741, 1742, 1788, 1743, 1745, 1794,
     1797, 1799, 1818, 1833, 1850, 1834, 1829, 1871, 1890, 1921,
      352, 3963, 1897, 1923, 1922, 1932, 1938, 1954, 1961, 1963,
     1964, 1977, 1980, 1996, 1995, 2011, 1979, 2010, 2029, 2027,
     2036,    0,  370,  349,    0,    0,    0, 2046, 2052, 2050,
     2068, 2051, 2067, 2069, 2084, 2083, 2086, 2105, 2109, 2108,
     2123, 2124, 2141, 2140,  310, 3963, 2130, 2162, 2156, 2166,
     2163, 2172, 2173, 2177, 2196, 2198, 2203, 2219, 2213, 2228,
     2212, 2235, 2253, 2244, 2260,  729,  775,  785,  823,  822,
      854,    0,  893,    0,    0,  911,  921,  927,  971,  966,

      985, 1024, 1016, 1027, 1026,    0, 1049,    0,    0, 1056,
     1057, 1075, 1092, 2266, 2276, 2291, 2298, 2293, 2302, 2308,
     2323, 2325, 2327, 2329, 2350, 2340, 2361, 2363, 2380, 2344,
     2374, 2393, 2395, 2390, 2411, 2406, 2412, 2416, 2429, 2443,
     2433, 2446, 2452, 2469, 2476, 2475, 2482, 2486, 2500, 2501,
     2505, 2507, 2530, 2516, 2537, 2534, 2548, 2569, 2566, 2580,
     2573, 2570, 2602, 2587, 2606, 2609, 2611, 2624, 2627, 2638,
     2641, 2656, 2643, 2673, 2675, 2659, 2678, 2682, 2688, 2691,
     2704, 2707,  335, 2714, 2717, 2736, 2721, 2739, 2753, 2755,
     2746, 2768, 2762, 2778, 2784, 2793, 2787, 2789, 2810, 2816,

     2819, 2833, 2842, 2848, 2800, 2852, 2837, 2851, 2867, 2873,
     2869,  313, 2884, 2886, 2903, 2913, 2909, 2916, 2918, 2939,
     2943, 2945, 2949, 2950, 2952, 2975, 2956,    0, 1091,    0,
        0, 1101, 1112,    0,    0,    0, 1139,    0, 1131,    0,
        0, 1149, 1189, 1200,    0,    0,    0,    0, 1219, 2982,
     2985, 2986, 2988, 2989, 3004, 3007, 3020, 3022, 3025, 3026,
     3039, 3036, 3043, 3057, 3058, 3068, 3074, 3079, 3083, 3084,
     3089, 3098, 3108, 3114, 3115, 3119, 3125, 3129, 3130, 3140,
     3155, 3146, 3156, 3162, 3165, 3187, 3180, 3194, 3178, 3196,
     3197, 3210, 3219, 3220, 3229, 3226, 3233, 3244, 3251, 3255,

     3260, 3265, 3266, 3269, 3287, 3284, 3291, 3298, 3301, 3316,
     3317, 3327, 3330, 3331, 3348, 3334, 3353, 3349, 3363, 3367,
     3382, 3380, 3384, 3385, 3403, 3398, 3416, 3414, 3417, 3435,
     3420, 3446, 3430, 3456, 3457, 3460, 3467,    0, 1234, 1260,
        0,    0, 1261, 1270,    0, 3461, 3486, 3496, 3462, 3492,
     3501, 3502, 3503, 3507, 3526, 3536, 3532, 3537, 3541, 3547,
     3543, 3558, 3572, 3573, 3574, 3577, 3583, 3604, 3598, 3608,
     3613, 3614, 3615, 3630, 3639, 3645, 3644, 1263,    0, 1270,
        0, 3649, 3654, 3670, 3671, 3680, 3681, 3697, 3687, 3702,
     3712, 3713, 3718, 3729, 3734, 3744, 3745, 1281, 1306, 3748,

     3766, 3767, 3769, 3783, 3785, 3801, 3804,    0,    0, 3807,
     3820, 3822, 3823, 3825, 3836, 3838, 3839, 3963,  279,  275,
     3881, 3887, 3893, 3899, 3905, 3911, 3917, 3922, 3927, 3933,
     3938, 3944, 3950, 3956
    } ;

static yyconst flex_int16_t yy_def[735] =
    {   0,
      718,    1,  718,    3,  718,    5,  718,    7,  718,    9,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  720,  720,  720,  720,  720,  720,  720,
      720,  720,  720,  720,  721,  721,  718,  718,  721,  718,
      721,  721,  721,  722,  722,   55,   55,   55,   55,   55,
       55,   55,   55,   55,  723,  723,   66,   66,   66,   66,
       66,   66,   66,   66,   66,  724,  724,  718,  724,  724,
      724,  724,  725,  725,   84,   84,   84,   84,   84,   84,
       84,   84,   84,  726,  726,   95,   95,   95,   95,   95,

       95,   95,   95,   95,  727,  727,  718,  718,  727,  727,
      727,  727,  728,  728,  114,  114,  114,  114,  114,  114,
      114,  114,  114,  729,  730,  730,  126,  126,  126,  126,
      126,  126,  126,  126,  126,  718,  731,  731,  718,  718,
      731,  731,  731,  731,  732,  732,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  733,  734,  734,  158,  158,
      158,  158,  158,  158,  158,  158,  158,  718,  718,  718,
      718,  718,  718,  718,  718,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  720,  720,  720,  720,  720,  720,  720,  720,

      720,  720,  720,  720,  720,  720,  720,  720,  720,  720,
      720,  721,  721,  718,  718,  721,  721,  721,  721,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   66,   66,   66,   66,
       66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
       66,   66,   66,   66,   66,  724,  724,  724,  724,  724,
      724,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,  727,  727,  727,

      727,  727,  727,  114,  114,  114,  114,  114,  114,  114,
      114,  114,  114,  114,  114,  114,  114,  114,  114,  114,
      718,  718,  126,  126,  126,  126,  126,  126,  126,  126,
      126,  126,  126,  126,  126,  126,  126,  126,  126,  126,
      126,  731,  731,  731,  731,  731,  731,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  718,  718,  158,  158,  158,  158,
      158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
      158,  158,  158,  158,  158,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  720,  720,

      720,  720,  720,  720,  720,  720,  720,  720,  720,  720,
      720,  720,  720,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   66,   66,   66,   66,
       66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
       66,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,  114,
      114,  114,  114,  114,  114,  114,  114,  114,  114,  114,
      114,  114,  729,  126,  126,  126,  126,  126,  126,  126,
      126,  126,  126,  126,  126,  126,  126,  126,  146,  146,

      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  733,  158,  158,  158,  158,  158,  158,  158,  158,
      158,  158,  158,  158,  158,  158,  158,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  720,  720,  720,
      720,  720,  720,  720,  720,  720,  720,  720,  720,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   66,
       66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
       66,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,  114,  114,  114,  114,  114,  114,  114,

      114,  114,  114,  126,  126,  126,  126,  126,  126,  126,
      126,  126,  126,  126,  126,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  158,  158,  158,  158,  158,
      158,  158,  158,  158,  158,  158,  158,  719,  719,  719,
      719,  720,  720,  720,  720,   55,   55,   55,   55,   66,
       66,   66,   66,   84,   84,   84,   84,   95,   95,   95,
       95,  114,  114,  114,  114,  126,  126,  126,  126,  146,
      146,  146,  146,  158,  158,  158,  158,  719,  719,  720,
      720,   55,   55,   66,   66,   84,   84,   95,   95,  114,
      114,  126,  126,  146,  146,  158,  158,  719,  720,   55,

       66,   84,   95,  114,  126,  146,  158,  719,  720,   55,
       66,   84,   95,  114,  126,  146,  158,    0,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718
    } ;

static yyconst flex_int16_t yy_nxt[4016] =
    {   0,
       12,   13,   14,   15,   16,   17,   18,   17,   19,   20,
       21,   22,   12,   23,   23,   24,   23,   25,   26,   23,
       27,   28,   29,   30,   31,   23,   23,   32,   23,   23,
       33,   12,   12,   34,   34,   35,   34,   36,   37,   34,
       38,   39,   40,   41,   42,   34,   34,   43,   34,   34,
       44,   12,   45,   46,   47,   45,   48,   49,   50,   49,
       49,   51,   52,   53,   45,   54,   54,   55,   54,   56,
       57,   54,   58,   59,   60,   61,   62,   54,   54,   63,
       54,   54,   64,   45,   45,   65,   65,   66,   65,   67,
       68,   65,   69,   70,   71,   72,   73,   65,   65,   74,

       65,   65,   75,   45,   76,   77,   78,   76,   79,   79,
       79,   79,   79,   80,   81,   82,   76,   83,   83,   84,
       83,   85,   86,   83,   87,   88,   89,   90,   91,   83,
       83,   92,   83,   83,   93,   76,   76,   94,   94,   95,
       94,   96,   97,   94,   98,   99,  100,  101,  102,   94,
       94,  103,   94,   94,  104,   76,  105,  106,  107,  108,
      109,  109,  109,  109,  109,  110,  111,  112,  105,  113,
      113,  114,  113,  115,  116,  113,  117,  118,  119,  120,
      121,  113,  113,  122,  113,  113,  123,  124,  105,  125,
      125,  126,  125,  127,  128,  125,  129,  130,  131,  132,

      133,  125,  125,  134,  125,  125,  135,  136,  137,  138,
      139,  140,  141,  141,  141,  141,  141,  142,  143,  144,
      137,  145,  145,  146,  145,  147,  148,  145,  149,  150,
      151,  152,  153,  145,  145,  154,  145,  145,  155,  156,
      137,  157,  157,  158,  157,  159,  160,  157,  161,  162,
      163,  164,  165,  157,  157,  166,  157,  157,  167,  137,
      173,  177,  179,  174,  181,  185,  182,  180,  189,  178,
      183,  186,  187,  190,  184,  191,  192,  217,  188,  193,
      218,  177,  179,  176,  181,  185,  182,  180,  189,  178,
      183,  186,  187,  190,  184,  191,  192,  194,  188,  196,

      198,  207,  200,  203,  197,  195,  201,  199,  205,  204,
      202,  208,  209,  211,  206,  718,  386,  194,  210,  196,
      198,  207,  200,  203,  197,  195,  201,  199,  205,  204,
      202,  208,  209,  211,  206,  220,  386,  718,  210,  212,
      212,  512,  212,  223,  212,  220,  212,  212,  224,  212,
      212,  212,  225,  220,  220,  220,  220,  259,  344,  233,
      260,  220,  220,  223,  220,  220,  234,  235,  224,  220,
      212,  343,  225,  220,  220,  301,  220,  345,  302,  233,
      346,  220,  220,  483,  220,  300,  234,  235,  299,  220,
      212,  212,  212,  387,  212,  258,  212,  237,  212,  212,

      220,  212,  212,  212,  221,  240,  236,  242,  220,  388,
      241,  237,  222,  387,  243,  237,  251,  237,  257,  237,
      220,  216,  212,  213,  221,  240,  236,  242,  220,  388,
      241,  237,  222,  389,  243,  237,  251,  237,  237,  237,
      390,  262,  212,  220,  255,  237,  237,  252,  226,  265,
      172,  220,  227,  389,  266,  168,  228,  237,  237,  391,
      390,  262,  366,  220,  255,  237,  237,  252,  226,  265,
      262,  220,  227,  392,  266,  262,  228,  220,  262,  391,
      276,  229,  267,  262,  393,  220,  262,  230,  347,  344,
      262,  275,  343,  392,  262,  262,  322,  220,  262,  394,

      276,  229,  267,  262,  393,  220,  262,  230,  220,  262,
      395,  275,  231,  279,  262,  277,  220,  262,  232,  394,
      303,  279,  300,  294,  299,  261,  258,  257,  220,  262,
      395,  219,  231,  279,  216,  277,  220,  262,  232,  212,
      212,  279,  212,  294,  212,  279,  212,  212,  262,  212,
      212,  212,  284,  282,  278,  304,  262,  396,  283,  285,
      279,  279,  309,  304,  397,  279,  293,  215,  262,  279,
      212,  214,  284,  282,  278,  304,  262,  396,  283,  285,
      279,  279,  309,  304,  397,  213,  293,  279,  175,  279,
      212,  212,  212,  297,  212,  279,  212,  304,  212,  212,

      398,  212,  212,  212,  238,  307,  304,  279,  304,  172,
      308,  317,  239,  297,  304,  279,  304,  304,  318,  399,
      398,  304,  212,  171,  238,  307,  304,  319,  304,  304,
      308,  317,  239,  400,  304,  401,  304,  323,  318,  399,
      170,  304,  212,  237,  169,  326,  168,  319,  244,  304,
      327,  237,  245,  400,  304,  401,  246,  323,  323,  402,
      320,  718,  304,  237,  341,  326,  323,  718,  244,  403,
      327,  237,  245,  404,  304,  405,  246,  237,  323,  402,
      320,  247,  304,  328,  341,  237,  323,  248,  718,  403,
      329,  323,  718,  404,  323,  405,  718,  237,  718,  337,

      406,  247,  323,  328,  407,  237,  408,  248,  237,  718,
      329,  323,  249,  323,  323,  409,  237,  718,  250,  337,
      406,  323,  323,  338,  407,  718,  408,  718,  237,  348,
      410,  718,  249,  323,  411,  409,  237,  351,  250,  237,
      412,  323,  352,  338,  413,  253,  528,  237,  718,  348,
      410,  254,  718,  718,  411,  718,  718,  351,  718,  237,
      412,  348,  352,  718,  413,  253,  528,  237,  353,  348,
      718,  254,  256,  256,  718,  256,  256,  256,  256,  256,
      256,  348,  256,  256,  256,  348,  348,  220,  353,  348,
      361,  348,  348,  348,  348,  220,  362,  363,  364,  348,

      348,  529,  530,  256,  718,  348,  348,  220,  718,  718,
      361,  348,  348,  348,  348,  220,  362,  363,  364,  348,
      348,  529,  530,  256,  256,  256,  718,  256,  256,  256,
      256,  256,  256,  367,  256,  256,  256,  263,  531,  532,
      372,  370,  415,  718,  367,  264,  371,  373,  367,  381,
      220,  718,  367,  367,  718,  256,  718,  263,  531,  532,
      372,  370,  415,  367,  367,  264,  371,  373,  367,  381,
      220,  367,  367,  382,  367,  256,  262,  533,  417,  220,
      385,  268,  367,  367,  262,  269,  220,  220,  718,  270,
      718,  367,  414,  382,  367,  220,  262,  533,  417,  220,

      385,  268,  367,  220,  262,  269,  220,  220,  416,  270,
      262,  220,  414,  718,  271,  220,  220,  534,  262,  220,
      272,  718,  718,  220,  220,  718,  718,  220,  416,  718,
      262,  220,  535,  418,  271,  220,  220,  534,  262,  220,
      272,  262,  220,  536,  220,  273,  237,  220,  537,  262,
      220,  274,  535,  418,  237,  220,  718,  718,  718,  718,
      718,  262,  220,  536,  718,  273,  237,  718,  537,  262,
      220,  274,  256,  256,  237,  256,  256,  256,  256,  256,
      256,  220,  256,  256,  256,  220,  220,  220,  538,  220,
      220,  425,  539,  220,  220,  220,  421,  419,  220,  420,

      424,  220,  540,  256,  718,  220,  220,  220,  538,  220,
      220,  425,  539,  220,  220,  220,  421,  419,  220,  420,
      424,  718,  540,  256,  256,  256,  718,  256,  256,  256,
      256,  256,  256,  220,  256,  256,  256,  280,  220,  541,
      220,  220,  542,  428,  543,  281,  220,  426,  220,  544,
      422,  237,  423,  220,  718,  256,  718,  280,  220,  541,
      220,  220,  542,  428,  543,  281,  220,  426,  220,  544,
      422,  237,  423,  545,  237,  256,  279,  546,  237,  547,
      430,  286,  237,  718,  279,  287,  237,  427,  237,  288,
      718,  429,  548,  545,  237,  237,  279,  546,  237,  547,

      430,  286,  237,  431,  279,  287,  237,  427,  237,  288,
      279,  429,  548,  549,  289,  237,  237,  638,  279,  237,
      290,  718,  718,  431,  237,  718,  639,  237,  718,  718,
      279,  718,  640,  549,  289,  237,  237,  638,  279,  237,
      290,  279,  237,  237,  237,  291,  639,  237,  432,  279,
      237,  292,  640,  718,  718,  237,  641,  642,  718,  237,
      718,  279,  237,  237,  718,  291,  548,  237,  432,  279,
      237,  292,  279,  237,  237,  433,  641,  642,  295,  237,
      279,  237,  237,  435,  296,  718,  548,  237,  434,  718,
      718,  718,  279,  237,  237,  433,  718,  718,  295,  718,

      279,  237,  237,  435,  296,  298,  298,  718,  434,  298,
      298,  298,  298,  298,  643,  298,  298,  298,  298,  298,
      644,  718,  298,  298,  298,  298,  298,  237,  298,  298,
      298,  305,  718,  237,  643,  237,  645,  718,  237,  306,
      644,  237,  237,  438,  436,  718,  237,  237,  718,  718,
      237,  305,  437,  237,  678,  237,  645,  440,  237,  306,
      304,  237,  237,  438,  436,  310,  237,  237,  304,  311,
      237,  439,  437,  312,  678,  237,  679,  440,  718,  718,
      304,  680,  718,  718,  718,  310,  681,  237,  304,  311,
      698,  439,  237,  312,  304,  237,  679,  699,  313,  441,

      237,  680,  304,  262,  314,  718,  681,  708,  262,  718,
      698,  262,  237,  718,  304,  718,  262,  699,  313,  441,
      237,  442,  304,  262,  314,  304,  443,  708,  262,  315,
      445,  262,  709,  304,  262,  316,  262,  718,  262,  718,
      718,  442,  718,  718,  718,  304,  443,  718,  718,  315,
      445,  718,  709,  304,  262,  316,  298,  298,  262,  718,
      298,  298,  298,  298,  298,  718,  298,  298,  298,  298,
      298,  718,  718,  298,  298,  298,  298,  298,  262,  298,
      298,  298,  324,  718,  262,  262,  262,  718,  718,  718,
      325,  718,  262,  262,  718,  262,  718,  444,  262,  718,

      718,  446,  324,  262,  262,  262,  262,  718,  718,  718,
      325,  323,  262,  262,  262,  262,  330,  444,  262,  323,
      331,  446,  262,  262,  332,  718,  262,  718,  718,  718,
      447,  323,  448,  718,  262,  718,  330,  718,  262,  323,
      331,  718,  262,  718,  332,  323,  262,  718,  718,  333,
      447,  262,  448,  323,  718,  334,  718,  718,  718,  262,
      718,  449,  718,  718,  718,  323,  718,  718,  718,  333,
      262,  262,  718,  323,  262,  334,  323,  718,  262,  262,
      335,  449,  262,  718,  323,  718,  336,  718,  718,  262,
      262,  450,  718,  718,  262,  718,  323,  262,  262,  718,

      335,  718,  262,  451,  323,  718,  336,  323,  262,  262,
      718,  450,  718,  339,  279,  323,  262,  262,  452,  340,
      718,  718,  279,  451,  718,  718,  718,  323,  262,  718,
      718,  718,  718,  339,  279,  323,  262,  718,  452,  340,
      342,  342,  279,  718,  342,  342,  342,  342,  342,  262,
      342,  342,  342,  453,  262,  279,  456,  262,  458,  279,
      718,  454,  262,  279,  279,  718,  279,  459,  455,  262,
      718,  718,  718,  453,  262,  279,  456,  262,  458,  279,
      718,  454,  262,  279,  279,  718,  279,  459,  455,  718,
      718,  342,  342,  342,  718,  718,  342,  342,  342,  342,

      342,  279,  342,  342,  342,  349,  718,  279,  279,  279,
      279,  279,  718,  350,  457,  279,  279,  460,  279,  279,
      718,  279,  718,  718,  718,  349,  461,  279,  279,  279,
      279,  279,  718,  350,  457,  279,  279,  460,  279,  279,
      279,  718,  279,  342,  348,  718,  461,  718,  279,  354,
      279,  279,  348,  355,  462,  718,  465,  356,  718,  279,
      279,  463,  279,  718,  348,  718,  718,  279,  279,  354,
      279,  279,  348,  355,  462,  279,  465,  356,  348,  279,
      718,  463,  357,  279,  464,  718,  348,  279,  358,  718,
      718,  279,  279,  718,  718,  279,  467,  718,  348,  718,

      279,  718,  357,  279,  464,  718,  348,  279,  358,  348,
      304,  279,  279,  359,  718,  279,  467,  348,  304,  360,
      279,  718,  468,  718,  718,  718,  718,  279,  718,  348,
      304,  718,  718,  359,  718,  279,  718,  348,  304,  360,
      342,  342,  468,  718,  342,  342,  342,  342,  342,  279,
      342,  342,  342,  279,  304,  471,  473,  279,  304,  466,
      469,  279,  304,  304,  304,  718,  304,  470,  718,  279,
      718,  718,  718,  279,  304,  471,  473,  279,  304,  466,
      469,  279,  304,  304,  304,  718,  304,  470,  718,  718,
      718,  342,  342,  342,  718,  718,  342,  342,  342,  342,

      342,  304,  342,  342,  342,  368,  718,  304,  718,  304,
      304,  718,  304,  369,  472,  304,  474,  718,  304,  718,
      304,  304,  718,  718,  718,  368,  718,  304,  475,  304,
      304,  304,  304,  369,  472,  304,  474,  718,  304,  304,
      304,  718,  304,  342,  367,  476,  304,  304,  475,  374,
      304,  304,  367,  375,  304,  304,  477,  376,  718,  304,
      718,  479,  304,  304,  367,  476,  304,  304,  718,  374,
      304,  304,  367,  375,  304,  304,  477,  376,  367,  718,
      478,  479,  377,  304,  304,  718,  367,  718,  378,  718,
      718,  304,  304,  718,  480,  718,  718,  718,  367,  718,

      478,  718,  377,  304,  304,  718,  367,  481,  378,  367,
      323,  304,  304,  379,  480,  718,  718,  367,  323,  380,
      718,  718,  718,  304,  718,  718,  718,  481,  718,  367,
      323,  304,  718,  379,  304,  485,  323,  367,  323,  380,
      367,  482,  304,  323,  323,  323,  383,  718,  367,  484,
      718,  487,  384,  323,  304,  485,  323,  718,  486,  323,
      367,  482,  304,  323,  323,  323,  383,  323,  367,  484,
      718,  487,  384,  323,  323,  488,  323,  323,  486,  323,
      718,  718,  323,  489,  323,  323,  718,  323,  718,  718,
      323,  718,  323,  323,  323,  488,  323,  323,  323,  718,

      323,  323,  323,  489,  323,  323,  490,  491,  323,  323,
      323,  718,  323,  323,  718,  718,  323,  323,  323,  492,
      323,  323,  718,  323,  323,  493,  490,  491,  323,  323,
      718,  323,  323,  495,  718,  718,  323,  323,  494,  492,
      323,  718,  323,  323,  323,  493,  496,  718,  323,  323,
      323,  323,  323,  495,  718,  497,  498,  323,  494,  348,
      323,  718,  323,  500,  502,  348,  496,  348,  323,  323,
      323,  348,  348,  348,  718,  497,  498,  323,  499,  348,
      348,  348,  348,  500,  502,  348,  718,  348,  348,  348,
      348,  348,  348,  348,  501,  718,  348,  348,  499,  348,

      348,  348,  348,  503,  348,  348,  718,  348,  348,  348,
      348,  718,  504,  505,  501,  718,  348,  348,  348,  348,
      718,  348,  348,  503,  348,  348,  348,  348,  506,  348,
      348,  718,  504,  505,  718,  508,  348,  348,  348,  507,
      718,  348,  348,  367,  348,  348,  348,  509,  506,  348,
      348,  367,  718,  348,  348,  508,  348,  348,  510,  507,
      511,  348,  348,  367,  348,  348,  718,  509,  718,  514,
      718,  367,  718,  348,  348,  367,  516,  367,  510,  367,
      511,  348,  348,  367,  367,  367,  367,  367,  513,  514,
      367,  718,  515,  517,  367,  367,  516,  367,  367,  367,

      718,  718,  718,  367,  367,  367,  367,  367,  513,  367,
      367,  367,  515,  517,  367,  518,  367,  367,  367,  367,
      718,  718,  718,  718,  367,  367,  367,  519,  718,  367,
      520,  367,  367,  367,  367,  518,  367,  367,  718,  367,
      367,  367,  521,  522,  367,  367,  367,  519,  367,  367,
      520,  718,  367,  367,  367,  523,  367,  367,  524,  718,
      367,  367,  521,  522,  718,  367,  367,  718,  367,  367,
      525,  718,  526,  367,  367,  523,  367,  367,  524,  220,
      527,  367,  718,  550,  718,  367,  367,  220,  718,  220,
      525,  718,  526,  367,  367,  718,  718,  220,  718,  220,

      527,  367,  551,  550,  220,  718,  220,  220,  552,  220,
      554,  220,  220,  553,  220,  220,  718,  220,  718,  220,
      718,  220,  551,  220,  220,  555,  220,  718,  552,  220,
      554,  220,  220,  553,  220,  220,  220,  718,  220,  220,
      220,  220,  220,  220,  220,  555,  220,  556,  220,  220,
      557,  718,  718,  220,  718,  718,  220,  237,  220,  563,
      220,  559,  220,  220,  220,  237,  220,  556,  220,  718,
      557,  220,  558,  220,  237,  718,  237,  237,  560,  563,
      718,  559,  237,  220,  237,  237,  718,  237,  718,  561,
      718,  220,  558,  237,  237,  237,  237,  562,  560,  718,

      564,  237,  237,  237,  237,  718,  237,  237,  237,  561,
      565,  237,  718,  237,  237,  237,  237,  562,  566,  237,
      564,  237,  718,  237,  237,  237,  237,  237,  237,  237,
      565,  237,  237,  237,  237,  567,  237,  568,  566,  237,
      718,  718,  237,  718,  237,  237,  237,  237,  718,  237,
      237,  569,  237,  237,  571,  567,  237,  568,  718,  262,
      570,  718,  237,  572,  237,  262,  237,  262,  718,  718,
      237,  569,  718,  262,  571,  718,  237,  718,  573,  262,
      570,  718,  262,  572,  237,  262,  574,  262,  262,  262,
      262,  575,  576,  262,  718,  262,  262,  262,  573,  262,

      718,  718,  262,  262,  718,  577,  574,  262,  262,  262,
      262,  575,  576,  262,  262,  262,  262,  262,  262,  262,
      262,  262,  262,  262,  578,  577,  262,  262,  579,  262,
      718,  718,  718,  262,  262,  718,  718,  581,  262,  718,
      262,  262,  262,  262,  578,  718,  262,  279,  579,  262,
      279,  262,  580,  718,  582,  279,  718,  581,  279,  718,
      583,  279,  718,  262,  718,  584,  718,  279,  718,  279,
      279,  262,  580,  718,  582,  279,  718,  718,  279,  279,
      583,  279,  279,  279,  585,  584,  279,  279,  718,  279,
      279,  279,  586,  279,  279,  718,  588,  587,  718,  279,

      279,  279,  279,  279,  585,  718,  279,  279,  279,  718,
      279,  279,  586,  279,  279,  279,  588,  587,  718,  279,
      279,  279,  279,  279,  279,  718,  589,  279,  279,  718,
      590,  718,  279,  591,  718,  279,  718,  279,  718,  279,
      279,  592,  279,  279,  279,  279,  589,  279,  593,  718,
      590,  304,  279,  591,  304,  594,  304,  279,  597,  304,
      279,  592,  304,  718,  304,  279,  718,  595,  593,  304,
      718,  304,  304,  596,  304,  594,  304,  304,  597,  304,
      304,  718,  304,  718,  304,  718,  304,  595,  304,  304,
      598,  304,  304,  596,  304,  304,  304,  304,  599,  304,

      304,  304,  600,  304,  304,  718,  304,  718,  304,  304,
      598,  304,  601,  718,  304,  304,  304,  304,  599,  304,
      304,  304,  600,  304,  304,  304,  602,  323,  603,  304,
      323,  604,  601,  718,  323,  323,  607,  304,  323,  718,
      304,  718,  323,  605,  718,  304,  602,  323,  603,  323,
      323,  604,  323,  606,  323,  323,  607,  323,  323,  323,
      323,  718,  323,  605,  718,  608,  323,  323,  323,  323,
      609,  718,  323,  606,  323,  323,  323,  323,  610,  323,
      323,  323,  718,  323,  718,  608,  323,  323,  323,  323,
      609,  323,  611,  718,  323,  323,  323,  323,  610,  323,

      323,  323,  323,  323,  614,  612,  323,  718,  323,  323,
      615,  323,  611,  348,  323,  613,  718,  323,  718,  323,
      323,  348,  323,  348,  614,  612,  323,  616,  323,  348,
      615,  348,  348,  348,  323,  613,  618,  348,  718,  718,
      348,  348,  617,  348,  718,  718,  348,  616,  619,  348,
      348,  348,  348,  718,  348,  348,  618,  348,  348,  620,
      348,  348,  617,  348,  348,  348,  348,  718,  619,  348,
      348,  621,  348,  348,  348,  348,  622,  718,  348,  620,
      348,  348,  348,  348,  348,  348,  348,  718,  623,  348,
      625,  621,  348,  348,  348,  624,  622,  367,  718,  367,

      348,  626,  348,  718,  718,  367,  348,  367,  623,  718,
      625,  718,  627,  718,  348,  624,  367,  367,  718,  367,
      628,  626,  367,  718,  367,  367,  367,  367,  629,  367,
      367,  367,  627,  631,  367,  630,  367,  367,  718,  367,
      628,  632,  367,  718,  367,  718,  367,  718,  629,  367,
      367,  367,  367,  631,  367,  630,  367,  367,  367,  367,
      367,  632,  367,  367,  367,  367,  367,  633,  718,  367,
      367,  634,  367,  367,  635,  718,  367,  637,  367,  718,
      367,  718,  367,  367,  367,  367,  367,  633,  367,  367,
      367,  634,  636,  367,  635,  220,  367,  637,  220,  220,

      718,  220,  220,  220,  718,  718,  220,  220,  367,  220,
      220,  646,  636,  718,  647,  220,  367,  220,  220,  220,
      220,  220,  220,  220,  648,  220,  220,  220,  220,  220,
      220,  646,  718,  220,  647,  220,  718,  220,  220,  237,
      220,  220,  649,  220,  648,  220,  220,  237,  220,  237,
      718,  718,  237,  220,  718,  220,  237,  237,  220,  237,
      237,  220,  649,  220,  237,  650,  220,  237,  718,  237,
      237,  237,  237,  718,  570,  718,  237,  237,  237,  237,
      237,  237,  718,  651,  237,  650,  718,  237,  652,  237,
      237,  237,  237,  718,  570,  237,  237,  237,  237,  237,

      237,  237,  237,  651,  237,  237,  653,  237,  652,  237,
      237,  262,  237,  718,  718,  237,  237,  237,  718,  262,
      237,  262,  237,  718,  237,  237,  653,  262,  262,  262,
      237,  262,  262,  718,  654,  262,  262,  718,  262,  262,
      262,  262,  262,  262,  655,  656,  262,  262,  262,  262,
      262,  262,  262,  262,  654,  262,  262,  718,  262,  279,
      262,  262,  262,  262,  655,  656,  262,  279,  262,  279,
      262,  262,  657,  262,  718,  279,  262,  279,  279,  279,
      718,  262,  658,  279,  718,  718,  279,  279,  262,  279,
      718,  279,  657,  279,  718,  279,  262,  279,  279,  279,

      279,  279,  658,  279,  592,  659,  279,  279,  279,  279,
      279,  279,  718,  279,  660,  279,  718,  279,  279,  279,
      279,  279,  718,  279,  592,  659,  718,  279,  279,  279,
      279,  279,  279,  304,  660,  279,  661,  279,  279,  304,
      279,  304,  304,  279,  718,  718,  304,  304,  718,  718,
      304,  279,  279,  304,  304,  662,  661,  304,  718,  304,
      279,  304,  304,  718,  304,  304,  304,  304,  304,  663,
      304,  664,  304,  304,  304,  662,  304,  304,  304,  304,
      718,  304,  323,  665,  304,  304,  304,  304,  304,  663,
      323,  664,  304,  304,  718,  718,  304,  323,  304,  304,

      323,  304,  323,  665,  323,  323,  304,  304,  323,  718,
      323,  323,  323,  666,  323,  614,  718,  323,  718,  323,
      323,  718,  323,  718,  323,  323,  667,  718,  323,  323,
      323,  323,  323,  666,  323,  614,  668,  323,  323,  323,
      323,  718,  323,  323,  323,  718,  667,  348,  323,  323,
      323,  323,  323,  718,  718,  348,  668,  323,  323,  718,
      323,  323,  348,  323,  323,  669,  348,  348,  323,  323,
      348,  323,  323,  718,  348,  348,  348,  718,  718,  670,
      348,  323,  348,  718,  348,  669,  348,  718,  348,  323,
      348,  718,  671,  348,  348,  348,  348,  348,  348,  670,

      348,  348,  672,  348,  348,  348,  348,  718,  348,  718,
      718,  367,  671,  348,  718,  348,  348,  348,  348,  367,
      673,  348,  672,  348,  348,  348,  348,  367,  718,  367,
      367,  367,  718,  367,  718,  367,  348,  367,  367,  367,
      673,  367,  674,  367,  348,  675,  718,  367,  367,  367,
      367,  367,  636,  367,  718,  367,  367,  367,  367,  367,
      718,  367,  674,  367,  718,  675,  676,  367,  367,  367,
      367,  367,  636,  367,  220,  220,  367,  367,  367,  367,
      367,  367,  220,  220,  677,  718,  676,  367,  367,  367,
      367,  718,  718,  367,  220,  220,  718,  367,  367,  220,

      367,  367,  220,  220,  677,  237,  682,  220,  367,  220,
      718,  718,  683,  237,  237,  237,  237,  220,  685,  220,
      262,  684,  237,  237,  237,  237,  682,  220,  262,  220,
      718,  718,  683,  237,  237,  237,  237,  220,  685,  262,
      262,  684,  237,  237,  237,  262,  686,  262,  262,  262,
      279,  718,  687,  262,  279,  718,  279,  262,  279,  262,
      279,  688,  279,  689,  279,  262,  686,  262,  279,  262,
      279,  304,  687,  262,  279,  718,  279,  262,  279,  304,
      279,  688,  279,  689,  279,  304,  304,  304,  279,  691,
      323,  304,  690,  304,  304,  304,  323,  718,  323,  304,

      718,  718,  718,  692,  323,  304,  304,  304,  718,  691,
      323,  323,  690,  304,  304,  304,  323,  323,  323,  323,
      693,  348,  718,  692,  323,  323,  348,  348,  348,  348,
      695,  323,  718,  694,  348,  348,  348,  323,  718,  323,
      693,  348,  718,  367,  718,  323,  348,  348,  348,  348,
      695,  367,  367,  694,  348,  348,  348,  367,  367,  696,
      367,  697,  220,  367,  718,  367,  367,  220,  718,  718,
      220,  367,  367,  718,  718,  220,  700,  367,  367,  696,
      367,  697,  220,  237,  237,  367,  367,  220,  718,  718,
      220,  237,  237,  262,  262,  220,  700,  701,  718,  718,

      279,  262,  262,  237,  237,  718,  718,  702,  279,  718,
      279,  237,  237,  262,  262,  304,  718,  701,  279,  718,
      279,  262,  262,  304,  703,  304,  323,  702,  279,  704,
      279,  323,  718,  304,  323,  304,  718,  718,  279,  323,
      705,  718,  348,  304,  703,  304,  323,  348,  718,  704,
      348,  323,  718,  304,  323,  348,  706,  367,  367,  323,
      705,  220,  348,  718,  718,  367,  367,  348,  718,  220,
      348,  707,  718,  718,  710,  348,  706,  367,  367,  237,
      262,  220,  279,  718,  718,  367,  367,  237,  262,  220,
      279,  707,  711,  712,  710,  713,  304,  718,  323,  237,

      262,  718,  279,  718,  304,  718,  323,  237,  262,  714,
      279,  715,  711,  712,  348,  713,  304,  367,  323,  718,
      220,  718,  348,  718,  304,  367,  323,  716,  220,  714,
      717,  715,  718,  237,  348,  262,  279,  367,  304,  718,
      220,  237,  348,  262,  279,  367,  304,  716,  220,  323,
      717,  348,  367,  237,  718,  262,  279,  323,  304,  348,
      367,  237,  718,  262,  279,  718,  304,  718,  718,  323,
      718,  348,  367,  718,  718,  718,  718,  323,  718,  348,
      367,  212,  718,  212,  718,  212,  212,  220,  718,  220,
      718,  220,  220,  237,  718,  237,  718,  237,  237,  256,

      718,  256,  256,  256,  256,  262,  718,  262,  262,  262,
      262,  279,  718,  279,  279,  279,  279,  298,  718,  718,
      298,  298,  304,  718,  718,  304,  304,  321,  321,  321,
      321,  321,  321,  323,  718,  718,  323,  323,  342,  718,
      718,  342,  342,  342,  348,  718,  718,  348,  348,  348,
      365,  365,  365,  365,  365,  365,  367,  718,  718,  367,
      367,  367,   11,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,

      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718
    } ;

static yyconst flex_int16_t yy_chk[4016] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,

        7,    7,    7,    7,    7,    7,    7,    7,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
       21,   24,   25,   21,   26,   28,   27,   25,   30,   24,
       27,   28,   29,   31,   27,   32,   33,   52,   29,  720,
       52,   24,   25,  719,   26,   28,   27,   25,   30,   24,
       27,   28,   29,   31,   27,   32,   33,   35,   29,   36,

       37,   41,   38,   39,   36,   35,   38,   37,   40,   39,
       38,   42,   43,   44,   40,  512,  177,   35,   43,   36,
       37,   41,   38,   39,   36,   35,   38,   37,   40,   39,
       38,   42,   43,   44,   40,   56,  177,  483,   43,   54,
       54,  365,   54,   56,   54,   57,   54,   54,   56,   54,
       54,   54,   57,   57,   61,   56,   62,   81,  344,   61,
       81,   63,   61,   56,   62,   57,   62,   63,   56,   63,
       54,  343,   57,   57,   61,  111,   62,  143,  111,   61,
      143,   63,   61,  321,   62,  300,   62,   63,  299,   63,
       54,   55,   55,  178,   55,  258,   55,   67,   55,   55,

       64,   55,   55,   55,   55,   67,   64,   68,   64,  179,
       67,   72,   55,  178,   68,   68,   72,   67,  257,   72,
       64,  216,   55,  213,   55,   67,   64,   68,   64,  179,
       67,   72,   55,  180,   68,   68,   72,   73,   75,   72,
      183,   85,   55,   58,   75,   73,   75,   73,   58,   85,
      172,   58,   58,  180,   85,  168,   58,   73,   75,  184,
      183,   85,  156,   58,   75,   73,   75,   73,   58,   85,
       91,   58,   58,  185,   85,   86,   58,   59,   91,  184,
       91,   59,   86,   86,  186,   59,   90,   59,  144,  142,
       91,   90,  138,  185,   90,   86,  124,   59,   91,  187,

       91,   59,   86,   86,  186,   59,   90,   59,   60,   92,
      188,   90,   60,  102,   90,   92,   60,   92,   60,  187,
      112,  102,  110,  102,  106,   82,   80,   77,   60,   92,
      188,   53,   60,  102,   51,   92,   60,   92,   60,   65,
       65,  102,   65,  102,   65,   96,   65,   65,   93,   65,
       65,   65,   97,   96,   93,  116,   93,  190,   96,   97,
       97,  101,  116,  116,  191,   96,  101,   50,   93,  101,
       65,   48,   97,   96,   93,  116,   93,  190,   96,   97,
       97,  101,  116,  116,  191,   46,  101,  104,   22,  101,
       65,   66,   66,  104,   66,  104,   66,  115,   66,   66,

      192,   66,   66,   66,   66,  115,  120,  104,  121,   20,
      115,  120,   66,  104,  120,  104,  121,  115,  121,  194,
      192,  122,   66,   19,   66,  115,  120,  122,  121,  122,
      115,  120,   66,  195,  120,  196,  121,  127,  121,  194,
       18,  122,   66,   69,   16,  127,   13,  122,   69,  122,
      127,   69,   69,  195,  123,  196,   69,  127,  135,  197,
      123,   11,  123,   69,  135,  127,  135,    0,   69,  198,
      127,   69,   69,  201,  123,  202,   69,   70,  135,  197,
      123,   70,  123,  128,  135,   70,  135,   70,    0,  198,
      128,  128,    0,  201,  132,  202,    0,   70,    0,  132,

      203,   70,  132,  128,  204,   70,  205,   70,   71,    0,
      128,  128,   71,  133,  132,  206,   71,    0,   71,  132,
      203,  133,  132,  133,  204,    0,  205,    0,   71,  147,
      208,    0,   71,  133,  209,  206,   71,  147,   71,   74,
      210,  133,  147,  133,  211,   74,  386,   74,    0,  147,
      208,   74,    0,    0,  209,    0,    0,  147,    0,   74,
      210,  148,  147,    0,  211,   74,  386,   74,  148,  148,
        0,   74,   83,   83,    0,   83,   83,   83,   83,   83,
       83,  148,   83,   83,   83,  152,  153,  220,  148,  148,
      152,  154,  155,  152,  153,  220,  153,  154,  155,  154,

      155,  387,  388,   83,    0,  152,  153,  220,    0,    0,
      152,  154,  155,  152,  153,  220,  153,  154,  155,  154,
      155,  387,  388,   83,   84,   84,    0,   84,   84,   84,
       84,   84,   84,  159,   84,   84,   84,   84,  389,  390,
      160,  159,  222,    0,  164,   84,  159,  160,  160,  164,
      222,    0,  164,  159,    0,   84,    0,   84,  389,  390,
      160,  159,  222,  165,  164,   84,  159,  160,  160,  164,
      222,  165,  164,  165,  167,   84,   87,  391,  224,  221,
      167,   87,  167,  165,   87,   87,  224,  221,    0,   87,
        0,  165,  221,  165,  167,  223,   87,  391,  224,  221,

      167,   87,  167,  223,   87,   87,  224,  221,  223,   87,
       88,  225,  221,    0,   88,  223,  226,  393,   88,  225,
       88,    0,    0,  223,  226,    0,    0,  227,  223,    0,
       88,  225,  396,  227,   88,  227,  226,  393,   88,  225,
       88,   89,  233,  397,  226,   89,  237,  227,  398,   89,
      233,   89,  396,  227,  237,  227,    0,    0,    0,    0,
        0,   89,  233,  397,    0,   89,  237,    0,  398,   89,
      233,   89,   94,   94,  237,   94,   94,   94,   94,   94,
       94,  228,   94,   94,   94,  229,  230,  235,  399,  228,
      234,  235,  400,  229,  230,  235,  230,  228,  234,  229,

      234,  228,  401,   94,    0,  229,  230,  235,  399,  228,
      234,  235,  400,  229,  230,  235,  230,  228,  234,  229,
      234,    0,  401,   94,   95,   95,    0,   95,   95,   95,
       95,   95,   95,  231,   95,   95,   95,   95,  232,  402,
      236,  231,  403,  239,  404,   95,  232,  236,  236,  405,
      231,  239,  232,  231,    0,   95,    0,   95,  232,  402,
      236,  231,  403,  239,  404,   95,  232,  236,  236,  405,
      231,  239,  232,  407,  238,   95,   98,  410,  240,  411,
      241,   98,  238,    0,   98,   98,  240,  238,  241,   98,
        0,  240,  412,  407,  238,  242,   98,  410,  240,  411,

      241,   98,  238,  242,   98,   98,  240,  238,  241,   98,
       99,  240,  412,  413,   99,  242,  243,  529,   99,  244,
       99,    0,    0,  242,  243,    0,  532,  244,    0,    0,
       99,    0,  533,  413,   99,  251,  243,  529,   99,  244,
       99,  100,  245,  251,  243,  100,  532,  244,  245,  100,
      245,  100,  533,    0,    0,  251,  537,  539,    0,  246,
        0,  100,  245,  251,    0,  100,  542,  246,  245,  100,
      245,  100,  103,  248,  247,  246,  537,  539,  103,  246,
      103,  248,  247,  248,  103,    0,  542,  246,  247,    0,
        0,    0,  103,  248,  247,  246,    0,    0,  103,    0,

      103,  248,  247,  248,  103,  113,  113,    0,  247,  113,
      113,  113,  113,  113,  543,  113,  113,  113,  114,  114,
      544,    0,  114,  114,  114,  114,  114,  249,  114,  114,
      114,  114,    0,  252,  543,  249,  549,    0,  250,  114,
      544,  252,  254,  252,  249,    0,  250,  249,    0,    0,
      254,  114,  250,  252,  639,  249,  549,  254,  250,  114,
      117,  252,  254,  252,  249,  117,  250,  253,  117,  117,
      254,  253,  250,  117,  639,  253,  640,  254,    0,    0,
      117,  643,    0,    0,    0,  117,  644,  253,  117,  117,
      678,  253,  255,  117,  118,  253,  640,  680,  118,  255,

      255,  643,  118,  262,  118,    0,  644,  698,  263,    0,
      678,  262,  255,    0,  118,    0,  263,  680,  118,  255,
      255,  263,  118,  262,  118,  119,  264,  698,  263,  119,
      266,  262,  699,  119,  264,  119,  263,    0,  266,    0,
        0,  263,    0,    0,    0,  119,  264,    0,    0,  119,
      266,    0,  699,  119,  264,  119,  125,  125,  266,    0,
      125,  125,  125,  125,  125,    0,  125,  125,  125,  126,
      126,    0,    0,  126,  126,  126,  126,  126,  267,  126,
      126,  126,  126,    0,  265,  268,  267,    0,    0,    0,
      126,    0,  265,  268,    0,  269,    0,  265,  267,    0,

        0,  269,  126,  269,  265,  268,  267,    0,    0,    0,
      126,  129,  265,  268,  270,  269,  129,  265,  271,  129,
      129,  269,  270,  269,  129,    0,  271,    0,    0,    0,
      270,  129,  271,    0,  270,    0,  129,    0,  271,  129,
      129,    0,  270,    0,  129,  130,  271,    0,    0,  130,
      270,  272,  271,  130,    0,  130,    0,    0,    0,  272,
        0,  272,    0,    0,    0,  130,    0,    0,    0,  130,
      275,  272,    0,  130,  273,  130,  131,    0,  275,  272,
      131,  272,  273,    0,  131,    0,  131,    0,    0,  274,
      275,  273,    0,    0,  273,    0,  131,  274,  275,    0,

      131,    0,  273,  274,  131,    0,  131,  134,  276,  274,
        0,  273,    0,  134,  279,  134,  276,  274,  276,  134,
        0,    0,  279,  274,    0,    0,    0,  134,  276,    0,
        0,    0,    0,  134,  279,  134,  276,    0,  276,  134,
      145,  145,  279,    0,  145,  145,  145,  145,  145,  277,
      145,  145,  145,  277,  278,  280,  281,  277,  283,  284,
        0,  278,  278,  280,  281,    0,  283,  284,  280,  277,
        0,    0,    0,  277,  278,  280,  281,  277,  283,  284,
        0,  278,  278,  280,  281,    0,  283,  284,  280,    0,
        0,  145,  146,  146,    0,    0,  146,  146,  146,  146,

      146,  282,  146,  146,  146,  146,    0,  285,  286,  282,
      288,  287,    0,  146,  282,  285,  286,  287,  288,  287,
        0,  282,    0,    0,    0,  146,  288,  285,  286,  282,
      288,  287,    0,  146,  282,  285,  286,  287,  288,  287,
      289,    0,  292,  146,  149,    0,  288,    0,  289,  149,
      292,  290,  149,  149,  289,    0,  292,  149,    0,  290,
      289,  290,  292,    0,  149,    0,    0,  291,  289,  149,
      292,  290,  149,  149,  289,  291,  292,  149,  150,  290,
        0,  290,  150,  293,  291,    0,  150,  291,  150,    0,
        0,  293,  295,    0,    0,  291,  295,    0,  150,    0,

      295,    0,  150,  293,  291,    0,  150,  296,  150,  151,
      304,  293,  295,  151,    0,  296,  295,  151,  304,  151,
      295,    0,  296,    0,    0,    0,    0,  296,    0,  151,
      304,    0,    0,  151,    0,  296,    0,  151,  304,  151,
      157,  157,  296,    0,  157,  157,  157,  157,  157,  294,
      157,  157,  157,  297,  305,  306,  308,  294,  309,  294,
      297,  297,  305,  306,  308,    0,  309,  305,    0,  294,
        0,    0,    0,  297,  305,  306,  308,  294,  309,  294,
      297,  297,  305,  306,  308,    0,  309,  305,    0,    0,
        0,  157,  158,  158,    0,    0,  158,  158,  158,  158,

      158,  307,  158,  158,  158,  158,    0,  310,    0,  307,
      311,    0,  312,  158,  307,  310,  311,    0,  311,    0,
      312,  307,    0,    0,    0,  158,    0,  310,  312,  307,
      311,  313,  312,  158,  307,  310,  311,    0,  311,  313,
      312,    0,  317,  158,  161,  313,  314,  316,  312,  161,
      317,  313,  161,  161,  314,  316,  314,  161,    0,  313,
        0,  316,  317,  315,  161,  313,  314,  316,    0,  161,
      317,  315,  161,  161,  314,  316,  314,  161,  162,    0,
      315,  316,  162,  315,  318,    0,  162,    0,  162,    0,
        0,  315,  318,    0,  318,    0,    0,    0,  162,    0,

      315,    0,  162,  319,  318,    0,  162,  319,  162,  163,
      323,  319,  318,  163,  318,    0,    0,  163,  323,  163,
        0,    0,    0,  319,    0,    0,    0,  319,    0,  163,
      323,  319,    0,  163,  320,  325,  324,  163,  323,  163,
      166,  320,  320,  325,  324,  326,  166,    0,  166,  324,
        0,  327,  166,  326,  320,  325,  324,    0,  326,  327,
      166,  320,  320,  325,  324,  326,  166,  328,  166,  324,
        0,  327,  166,  326,  329,  328,  330,  331,  326,  327,
        0,    0,  329,  331,  330,  331,    0,  328,    0,    0,
      332,    0,  337,  333,  329,  328,  330,  331,  332,    0,

      337,  333,  329,  331,  330,  331,  332,  333,  335,  334,
      332,    0,  337,  333,    0,    0,  335,  334,  332,  334,
      337,  333,    0,  338,  336,  335,  332,  333,  335,  334,
        0,  338,  336,  338,    0,    0,  335,  334,  336,  334,
      340,    0,  339,  338,  336,  335,  339,    0,  340,  341,
      339,  338,  336,  338,    0,  340,  341,  341,  336,  348,
      340,    0,  339,  350,  352,  349,  339,  348,  340,  341,
      339,  350,  352,  349,    0,  340,  341,  341,  349,  348,
      353,  351,  354,  350,  352,  349,    0,  348,  353,  351,
      354,  350,  352,  349,  351,    0,  356,  355,  349,  357,

      353,  351,  354,  355,  356,  355,    0,  357,  353,  351,
      354,    0,  356,  357,  351,    0,  356,  355,  358,  357,
        0,  360,  359,  355,  356,  355,  358,  357,  358,  360,
      359,    0,  356,  357,    0,  360,  361,  362,  358,  359,
        0,  360,  359,  367,  361,  362,  358,  362,  358,  360,
      359,  367,    0,  364,  363,  360,  361,  362,  363,  359,
      364,  364,  363,  367,  361,  362,    0,  362,    0,  369,
        0,  367,    0,  364,  363,  368,  371,  369,  363,  370,
      364,  364,  363,  368,  371,  372,  373,  370,  368,  369,
      374,    0,  370,  372,  373,  368,  371,  369,  374,  370,

        0,    0,    0,  368,  371,  372,  373,  370,  368,  375,
      374,  376,  370,  372,  373,  375,  377,  375,  374,  376,
        0,    0,    0,    0,  377,  381,  379,  376,    0,  375,
      377,  376,  378,  381,  379,  375,  377,  375,    0,  376,
      378,  380,  378,  379,  377,  381,  379,  376,  382,  380,
      377,    0,  378,  381,  379,  380,  382,  384,  382,    0,
      378,  380,  378,  379,    0,  384,  383,    0,  382,  380,
      383,    0,  384,  385,  383,  380,  382,  384,  382,  414,
      385,  385,    0,  414,    0,  384,  383,  414,    0,  415,
      383,    0,  384,  385,  383,    0,    0,  415,    0,  414,

      385,  385,  415,  414,  416,    0,  418,  414,  416,  415,
      418,  417,  416,  417,  418,  419,    0,  415,    0,  417,
        0,  420,  415,  419,  416,  419,  418,    0,  416,  420,
      418,  417,  416,  417,  418,  419,  421,    0,  422,  417,
      423,  420,  424,  419,  421,  419,  422,  421,  423,  420,
      424,    0,    0,  426,    0,    0,  421,  430,  422,  430,
      423,  426,  424,  425,  421,  430,  422,  421,  423,    0,
      424,  425,  425,  426,  427,    0,  428,  430,  427,  430,
        0,  426,  427,  425,  428,  430,    0,  431,    0,  428,
        0,  425,  425,  429,  427,  431,  428,  429,  427,    0,

      431,  429,  427,  434,  428,    0,  432,  431,  433,  428,
      432,  434,    0,  429,  432,  431,  433,  429,  433,  436,
      431,  429,    0,  434,  435,  437,  432,  436,  433,  438,
      432,  434,  435,  437,  432,  435,  433,  438,  433,  436,
        0,    0,  439,    0,  435,  437,  441,  436,    0,  438,
      439,  439,  435,  437,  441,  435,  440,  438,    0,  442,
      440,    0,  439,  442,  440,  443,  441,  442,    0,    0,
      439,  439,    0,  443,  441,    0,  440,    0,  443,  442,
      440,    0,  444,  442,  440,  443,  444,  442,  446,  445,
      444,  445,  446,  443,    0,  447,  446,  445,  443,  448,

        0,    0,  444,  447,    0,  447,  444,  448,  446,  445,
      444,  445,  446,  449,  450,  447,  446,  445,  451,  448,
      452,  449,  450,  447,  449,  447,  451,  448,  452,  454,
        0,    0,    0,  449,  450,    0,    0,  454,  451,    0,
      452,  449,  450,  453,  449,    0,  451,  456,  452,  454,
      455,  453,  453,    0,  455,  456,    0,  454,  455,    0,
      456,  457,    0,  453,    0,  457,    0,  456,    0,  457,
      455,  453,  453,    0,  455,  456,    0,    0,  455,  459,
      456,  457,  458,  462,  458,  457,  461,  459,    0,  457,
      458,  462,  459,  460,  461,    0,  461,  460,    0,  459,

      464,  460,  458,  462,  458,    0,  461,  459,  464,    0,
      458,  462,  459,  460,  461,  463,  461,  460,    0,  465,
      464,  460,  466,  463,  467,    0,  463,  465,  464,    0,
      466,    0,  467,  467,    0,  463,    0,  468,    0,  465,
      469,  468,  466,  463,  467,  468,  463,  465,  469,    0,
      466,  470,  467,  467,  471,  470,  473,  468,  473,  470,
      469,  468,  471,    0,  473,  468,    0,  471,  469,  472,
        0,  470,  476,  472,  471,  470,  473,  472,  473,  470,
      476,    0,  471,    0,  473,    0,  474,  471,  475,  472,
      474,  477,  476,  472,  474,  478,  475,  472,  475,  477,

      476,  479,  477,  478,  480,    0,  474,    0,  475,  479,
      474,  477,  480,    0,  474,  478,  475,  481,  475,  477,
      482,  479,  477,  478,  480,  481,  481,  484,  482,  479,
      485,  484,  480,    0,  487,  484,  487,  481,  485,    0,
      482,    0,  487,  485,    0,  481,  481,  484,  482,  486,
      485,  484,  488,  486,  487,  484,  487,  486,  485,  491,
      488,    0,  487,  485,    0,  488,  489,  491,  490,  486,
      489,    0,  488,  486,  489,  493,  490,  486,  490,  491,
      488,  492,    0,  493,    0,  488,  489,  491,  490,  492,
      489,  494,  492,    0,  489,  493,  490,  495,  490,  494,

      497,  492,  498,  493,  497,  495,  496,    0,  497,  492,
      498,  494,  492,  505,  496,  496,    0,  495,    0,  494,
      497,  505,  498,  499,  497,  495,  496,  499,  497,  500,
      498,  499,  501,  505,  496,  496,  501,  500,    0,    0,
      501,  505,  500,  499,    0,    0,  502,  499,  502,  500,
      507,  499,  501,    0,  502,  503,  501,  500,  507,  503,
      501,  504,  500,  503,  508,  506,  502,    0,  502,  504,
      507,  504,  508,  506,  502,  503,  506,    0,  507,  503,
      509,  504,  511,  503,  508,  506,  510,    0,  509,  504,
      511,  504,  508,  506,  510,  510,  506,  513,    0,  514,

      509,  513,  511,    0,    0,  513,  510,  514,  509,    0,
      511,    0,  514,    0,  510,  510,  515,  513,    0,  514,
      515,  513,  517,    0,  515,  513,  516,  514,  516,  518,
      517,  519,  514,  518,  516,  517,  515,  518,    0,  519,
      515,  519,  517,    0,  515,    0,  516,    0,  516,  518,
      517,  519,  520,  518,  516,  517,  521,  518,  522,  519,
      520,  519,  523,  524,  521,  525,  522,  521,    0,  527,
      523,  524,  520,  525,  525,    0,  521,  527,  522,    0,
      520,    0,  523,  524,  521,  525,  522,  521,  526,  527,
      523,  524,  526,  525,  525,  550,  526,  527,  551,  552,

        0,  553,  554,  550,    0,    0,  551,  552,  526,  553,
      554,  551,  526,    0,  554,  550,  526,  555,  551,  552,
      556,  553,  554,  550,  555,  555,  551,  552,  556,  553,
      554,  551,    0,  557,  554,  558,    0,  555,  559,  560,
      556,  557,  559,  558,  555,  555,  559,  560,  556,  562,
        0,    0,  561,  557,    0,  558,  563,  562,  559,  560,
      561,  557,  559,  558,  563,  561,  559,  560,    0,  562,
      564,  565,  561,    0,  564,    0,  563,  562,  564,  565,
      561,  566,    0,  565,  563,  561,    0,  567,  566,  566,
      564,  565,  568,    0,  564,  567,  569,  570,  564,  565,

      568,  566,  571,  565,  569,  570,  571,  567,  566,  566,
      571,  572,  568,    0,    0,  567,  569,  570,    0,  572,
      568,  573,  571,    0,  569,  570,  571,  574,  575,  573,
      571,  572,  576,    0,  573,  574,  575,    0,  577,  572,
      576,  573,  578,  579,  576,  577,  577,  574,  575,  573,
      578,  579,  576,  580,  573,  574,  575,    0,  577,  582,
      576,  580,  578,  579,  576,  577,  577,  582,  581,  583,
      578,  579,  581,  580,    0,  584,  581,  583,  585,  582,
        0,  580,  583,  584,    0,    0,  585,  582,  581,  583,
        0,  589,  581,  587,    0,  584,  581,  583,  585,  589,

      586,  587,  583,  584,  586,  587,  585,  588,  586,  590,
      591,  589,    0,  587,  588,  588,    0,  590,  591,  589,
      586,  587,    0,  592,  586,  587,    0,  588,  586,  590,
      591,  592,  593,  594,  588,  588,  593,  590,  591,  596,
      593,  594,  595,  592,    0,    0,  597,  596,    0,    0,
      595,  592,  593,  594,  597,  595,  593,  598,    0,  596,
      593,  594,  595,    0,  599,  598,  597,  596,  600,  598,
      595,  599,  599,  601,  597,  595,  600,  598,  602,  603,
        0,  601,  604,  603,  599,  598,  602,  603,  600,  598,
      604,  599,  599,  601,    0,    0,  600,  606,  602,  603,

      605,  601,  604,  603,  607,  606,  602,  603,  605,    0,
      604,  608,  607,  605,  609,  608,    0,  606,    0,  608,
      605,    0,  609,    0,  607,  606,  609,    0,  605,  610,
      611,  608,  607,  605,  609,  608,  610,  610,  611,  608,
      612,    0,  609,  613,  614,    0,  609,  616,  612,  610,
      611,  613,  614,    0,    0,  616,  610,  610,  611,    0,
      612,  615,  618,  613,  614,  615,  617,  616,  612,  615,
      618,  613,  614,    0,  617,  616,  619,    0,    0,  617,
      620,  615,  618,    0,  619,  615,  617,    0,  620,  615,
      618,    0,  620,  622,  617,  621,  619,  623,  624,  617,

      620,  622,  621,  621,  619,  623,  624,    0,  620,    0,
        0,  626,  620,  622,    0,  621,  625,  623,  624,  626,
      625,  622,  621,  621,  625,  623,  624,  628,    0,  627,
      629,  626,    0,  631,    0,  628,  625,  627,  629,  626,
      625,  631,  627,  633,  625,  631,    0,  628,  630,  627,
      629,  633,  630,  631,    0,  628,  630,  627,  629,  632,
        0,  631,  627,  633,    0,  631,  632,  632,  630,  634,
      635,  633,  630,  636,  646,  649,  630,  634,  635,  632,
      637,  636,  646,  649,  637,    0,  632,  632,  637,  634,
      635,    0,    0,  636,  646,  649,    0,  634,  635,  647,

      637,  636,  646,  649,  637,  650,  647,  647,  637,  648,
        0,    0,  648,  650,  651,  652,  653,  648,  652,  647,
      654,  651,  651,  652,  653,  650,  647,  647,  654,  648,
        0,    0,  648,  650,  651,  652,  653,  648,  652,  655,
      654,  651,  651,  652,  653,  657,  655,  655,  654,  656,
      658,    0,  656,  657,  659,    0,  661,  656,  658,  655,
      660,  659,  659,  660,  661,  657,  655,  655,  660,  656,
      658,  662,  656,  657,  659,    0,  661,  656,  658,  662,
      660,  659,  659,  660,  661,  663,  664,  665,  660,  664,
      666,  662,  663,  663,  664,  665,  667,    0,  666,  662,

        0,    0,    0,  667,  667,  663,  664,  665,    0,  664,
      666,  669,  663,  663,  664,  665,  667,  668,  666,  669,
      668,  670,    0,  667,  667,  668,  671,  672,  673,  670,
      672,  669,    0,  671,  671,  672,  673,  668,    0,  669,
      668,  670,    0,  674,    0,  668,  671,  672,  673,  670,
      672,  674,  675,  671,  671,  672,  673,  677,  676,  675,
      675,  676,  682,  674,    0,  677,  676,  683,    0,    0,
      682,  674,  675,    0,    0,  683,  682,  677,  676,  675,
      675,  676,  682,  684,  685,  677,  676,  683,    0,    0,
      682,  684,  685,  686,  687,  683,  682,  684,    0,    0,

      689,  686,  687,  684,  685,    0,    0,  686,  689,    0,
      688,  684,  685,  686,  687,  690,    0,  684,  688,    0,
      689,  686,  687,  690,  688,  691,  692,  686,  689,  690,
      688,  693,    0,  691,  692,  690,    0,    0,  688,  693,
      692,    0,  694,  690,  688,  691,  692,  695,    0,  690,
      694,  693,    0,  691,  692,  695,  694,  696,  697,  693,
      692,  700,  694,    0,    0,  696,  697,  695,    0,  700,
      694,  696,    0,    0,  700,  695,  694,  696,  697,  701,
      702,  700,  703,    0,    0,  696,  697,  701,  702,  700,
      703,  696,  701,  702,  700,  703,  704,    0,  705,  701,

      702,    0,  703,    0,  704,    0,  705,  701,  702,  704,
      703,  705,  701,  702,  706,  703,  704,  707,  705,    0,
      710,    0,  706,    0,  704,  707,  705,  706,  710,  704,
      707,  705,    0,  711,  706,  712,  713,  707,  714,    0,
      710,  711,  706,  712,  713,  707,  714,  706,  710,  715,
      707,  716,  717,  711,    0,  712,  713,  715,  714,  716,
      717,  711,    0,  712,  713,    0,  714,    0,    0,  715,
        0,  716,  717,    0,    0,    0,    0,  715,    0,  716,
      717,  721,    0,  721,    0,  721,  721,  722,    0,  722,
        0,  722,  722,  723,    0,  723,    0,  723,  723,  724,

        0,  724,  724,  724,  724,  725,    0,  725,  725,  725,
      725,  726,    0,  726,  726,  726,  726,  727,    0,    0,
      727,  727,  728,    0,    0,  728,  728,  729,  729,  729,
      729,  729,  729,  730,    0,    0,  730,  730,  731,    0,
        0,  731,  731,  731,  732,    0,    0,  732,  732,  732,
      733,  733,  733,  733,  733,  733,  734,    0,    0,  734,
      734,  734,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,

      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 1;

static yyconst flex_int16_t yy_rule_linenum[51] =
    {   0,
       95,   99,  100,  104,  110,  116,  125,  134,  155,  161,
      175,  176,  177,  178,  182,  188,  193,  196,  197,  198,
      206,  207,  217,  218,  219,  224,  232,  233,  234,  235,
      236,  237,  238,  239,  240,  241,  242,  243,  244,  245,
      246,  247,  248,  265,  273,  282,  287,  296,  298,  300
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "cool.flex"
/*
 *  The scanner definition for COOL.
 */
/*
 *  Stuff enclosed in %{ %} in the first section is copied verbatim to the
 *  output, so headers and global definitions are placed here to be visible
 * to the code in the file.  Dont remove anything that was here initially
 */
#line 11 "cool.flex"
#include <cool-parse.h>
#include <stringtab.h>
#include <utilities.h>

/* The compiler assumes these identifiers. */
#define yylval cool_yylval
#define yylex  cool_yylex

/* Max size of string constants */
#define MAX_STR_CONST 1025
#define YY_NO_UNPUT   /* keep g++ happy */

extern FILE *fin; /* we read from this file */

/* define YY_INPUT so we read from the FILE fin:
 * This change makes it possible to use this scanner in
 * the Cool compiler.
 */
#undef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( (result = fread( (char*)buf, sizeof(char), max_size, fin)) < 0) \
		YY_FATAL_ERROR( "read() in flex scanner failed");

char string_buf[MAX_STR_CONST]; /* to assemble string constants */
char *string_buf_ptr;

extern int curr_lineno;
extern int verbose_flag;

extern YYSTYPE cool_yylval;

/*
 *  Add Your own definitions here
 */
#define STRING_BUF_UNUSED() \
  (string_buf + MAX_STR_CONST - string_buf_ptr - 1)

int nested_comment;


/*
 * Define names for regular expressions here.
 */
#line 1728 "cool-lex.cc"

#define INITIAL 0
#define COMMENT 1
#define COMMENT_LINE 2
#define STRING 3
#define STRING_ERROR 4

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
#include <unistd.h>
/* %endif */
/* %if-c++-only */
/* %endif */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */
/* %if-c-only */

static int yy_init_globals (void );

/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif End reentrant structures and macros. */

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

int yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

/* %if-bison-bridge */
/* %endif */

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

/* %not-for-header */

    static void yyunput (int c,char *buf_ptr  );
    
/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif
/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */

/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\
/* %if-c++-only C++ definition \ */\
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
/* %endif */
/* %if-c++-only */
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */

/* %ok-for-header */

/* %not-for-header */

/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */

extern int yylex (void);

#define YY_DECL int yylex (void)
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	YY_USER_ACTION

/* %not-for-header */

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
/* %% [7.0] user's declarations go here */
#line 86 "cool.flex"




 /*
  *  Nested comments
  */

#line 1988 "cool-lex.cc"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
			yyin = stdin;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! yyout )
/* %if-c-only */
			yyout = stdout;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 719 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 3963 );

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				fprintf( stderr, "--scanner backing up\n" );
			else if ( yy_act < 51 )
				fprintf( stderr, "--accepting rule at line %ld (\"%s\")\n",
				         (long)yy_rule_linenum[yy_act], yytext );
			else if ( yy_act == 51 )
				fprintf( stderr, "--accepting default rule (\"%s\")\n",
				         yytext );
			else if ( yy_act == 52 )
				fprintf( stderr, "--(end of buffer or a NUL)\n" );
			else
				fprintf( stderr, "--EOF (start condition %d)\n", YY_START );
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 95 "cool.flex"
{
    BEGIN(COMMENT);
    nested_comment = 0;
  }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 99 "cool.flex"
BEGIN(COMMENT_LINE);
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 100 "cool.flex"
{
    cool_yylval.error_msg = "Unmatched *)";
    return (ERROR);
  }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 104 "cool.flex"
{
    BEGIN(STRING);
    string_buf_ptr = string_buf;
  }
	YY_BREAK


case 5:
YY_RULE_SETUP
#line 110 "cool.flex"
{
    BEGIN(INITIAL);
    *string_buf_ptr++ = 0;
    cool_yylval.symbol = stringtable.add_string(string_buf);
    return (STR_CONST);
  }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 116 "cool.flex"
{
    if (yyleng > STRING_BUF_UNUSED()) {
      cool_yylval.error_msg = "String constant too long";
      BEGIN(STRING_ERROR);
      return (ERROR);
    }
    strcpy(string_buf_ptr, yytext);
    string_buf_ptr += yyleng;
  }
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 125 "cool.flex"
{
    if (1 > STRING_BUF_UNUSED()) {
      cool_yylval.error_msg = "String constant too long";
      BEGIN(STRING_ERROR);
      return (ERROR);
    }
    *string_buf_ptr++ = '\n';
    curr_lineno++;
  }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 134 "cool.flex"
{
    if (yyleng/2 > STRING_BUF_UNUSED()) {
      cool_yylval.error_msg = "String constant too long";
      BEGIN(STRING_ERROR);
      return (ERROR);
    }
    for (int i = 1; i < yyleng; i+=2) {
      switch (yytext[i]) {
        case 'n': *string_buf_ptr++ = '\n'; break;
        case 't': *string_buf_ptr++ = '\t'; break;
        case 'b': *string_buf_ptr++ = '\b'; break;
        case 'f': *string_buf_ptr++ = '\f'; break;
        case '\0': 
          cool_yylval.error_msg = "String contains escaped null character.";
          BEGIN(STRING_ERROR);
          return (ERROR);
        default: *string_buf_ptr++ = yytext[i];
      }
    }
  }
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 155 "cool.flex"
{
    BEGIN(INITIAL);
    cool_yylval.error_msg = "Unterminated string constant"; 
    curr_lineno++;
    return (ERROR); 
  }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 161 "cool.flex"
{
    BEGIN(STRING_ERROR);
    cool_yylval.error_msg = "String contains null character"; 
    return (ERROR);
  }
	YY_BREAK
case YY_STATE_EOF(STRING):
#line 166 "cool.flex"
{
    BEGIN(INITIAL);
    cool_yylval.error_msg = "EOF in string constant";
    return (ERROR);
  }
	YY_BREAK


case 11:
YY_RULE_SETUP
#line 175 "cool.flex"

	YY_BREAK
case 12:
YY_RULE_SETUP
#line 176 "cool.flex"

	YY_BREAK
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
#line 177 "cool.flex"
curr_lineno++;
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 178 "cool.flex"
{
    BEGIN(INITIAL);
    curr_lineno++;
  }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 182 "cool.flex"
{
    BEGIN(INITIAL);
  }
	YY_BREAK


case 16:
YY_RULE_SETUP
#line 188 "cool.flex"
{
    if (nested_comment-- == 0) {
      BEGIN(INITIAL);
    }
  }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 193 "cool.flex"
{
    nested_comment++;
  }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 196 "cool.flex"

	YY_BREAK
case 19:
YY_RULE_SETUP
#line 197 "cool.flex"

	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 198 "cool.flex"
curr_lineno++;
	YY_BREAK
case YY_STATE_EOF(COMMENT):
#line 199 "cool.flex"
{
    BEGIN(INITIAL);
    cool_yylval.error_msg = "EOF in comment";
    return (ERROR);
  }
	YY_BREAK


case 21:
YY_RULE_SETUP
#line 206 "cool.flex"

	YY_BREAK
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
#line 207 "cool.flex"
{
    BEGIN(INITIAL);
    curr_lineno++;
  }
	YY_BREAK

/*
  *  The multiple-character operators.
  */
case 23:
YY_RULE_SETUP
#line 217 "cool.flex"
{ return (DARROW); }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 218 "cool.flex"
{ return (LE); }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 219 "cool.flex"
{ return (ASSIGN); }
	YY_BREAK
/*
  * The single-character operators.
  */
case 26:
YY_RULE_SETUP
#line 224 "cool.flex"
{ return yytext[0]; }
	YY_BREAK
/*
  * Keywords are case-insensitive except for the values true and false,
  * which must begin with a lower-case letter.
  */
case 27:
YY_RULE_SETUP
#line 232 "cool.flex"
{ return (CLASS); }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 233 "cool.flex"
{ return (ELSE); }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 234 "cool.flex"
{ return (FI); }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 235 "cool.flex"
{ return (IF); }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 236 "cool.flex"
{ return (IN); }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 237 "cool.flex"
{ return (INHERITS); }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 238 "cool.flex"
{ return (LET); }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 239 "cool.flex"
{ return (LOOP); }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 240 "cool.flex"
{ return (POOL); }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 241 "cool.flex"
{ return (THEN); }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 242 "cool.flex"
{ return (WHILE); }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 243 "cool.flex"
{ return (CASE); }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 244 "cool.flex"
{ return (ESAC); }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 245 "cool.flex"
{ return (OF); }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 246 "cool.flex"
{ return (NEW); }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 247 "cool.flex"
{ return (ISVOID); }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 248 "cool.flex"
{ return (NOT); }
	YY_BREAK
/*
  *  String constants (C syntax)
  *  Escape sequence \c is accepted for all characters c. Except for 
  *  \n \t \b \f, the result is c.
  *
  */
/*
  * Int constants
  */
case 44:
YY_RULE_SETUP
#line 265 "cool.flex"
{
  cool_yylval.symbol = inttable.add_string(yytext);
  return (INT_CONST);
}
	YY_BREAK
/*
  * Bool constants
  */
case 45:
YY_RULE_SETUP
#line 273 "cool.flex"
{
  if (*yytext == 't') {
    cool_yylval.boolean = true;
  } else {
    cool_yylval.boolean = false;
  }
  return (BOOL_CONST);
}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 282 "cool.flex"
{
  cool_yylval.symbol = idtable.add_string(yytext);
  return (TYPEID);
}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 287 "cool.flex"
{
  cool_yylval.symbol = idtable.add_string(yytext);
  return (OBJECTID);
}
	YY_BREAK
/*
  * White spaces.
  */
case 48:
YY_RULE_SETUP
#line 296 "cool.flex"
{}
	YY_BREAK
case 49:
/* rule 49 can match eol */
YY_RULE_SETUP
#line 298 "cool.flex"
{ curr_lineno++;}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 300 "cool.flex"
{ cool_yylval.error_msg = yytext; return (ERROR); }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 301 "cool.flex"
ECHO;
	YY_BREAK
#line 2502 "cool-lex.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT_LINE):
case YY_STATE_EOF(STRING_ERROR):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */

/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
static int yy_get_next_buffer (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */

    static yy_state_type yy_get_previous_state (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 52);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 719 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
/* %endif */
/* %if-c++-only */
/* %endif */
{
	register int yy_is_jam;
    /* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 52;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 719 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 718);

	return yy_is_jam ? 0 : yy_current_state;
}

/* %if-c-only */

    static void yyunput (int c, register char * yy_bp )
/* %endif */
/* %if-c++-only */
/* %endif */
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

/* %% [18.0] update yylineno here */

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
/* %if-c-only */

/* %endif */

/* %if-c-only */
#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

/* %endif */
/* %if-c++-only */
/* %endif */
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

/* %% [19.0] update BOL and yylineno */

	return c;
}
/* %if-c-only */
#endif	/* ifndef YY_NO_INPUT */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
    void yyrestart  (FILE * input_file )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
/* %if-c-only */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

/* %if-c-only */
static void yy_load_buffer_state  (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
/* %if-c-only */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
/* %endif */
/* %if-c++-only */
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
/* %if-c-only */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

/* %if-c-only */

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* %endif */

/* %if-c++-only */
/* %endif */

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )
/* %endif */
/* %if-c++-only */
/* %endif */

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
/* %endif */
/* %if-c++-only */
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
/* %if-c-only */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
/* %if-c-only */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
/* %if-c-only */
void yypop_buffer_state (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
static void yyensure_buffer_stack (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}
/* %endif */

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}
/* %endif */
/* %if-c++-only */
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */
/* %endif */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/* %if-reentrant */
/* %endif */

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

/* %endif */

/* %if-reentrant */
/* %if-bison-bridge */
/* %endif */
/* %endif if-c-only */

/* %if-c-only */
static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

/* %if-reentrant */
/* %endif */
    return 0;
}
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 301 "cool.flex"



